1. Git Basic
	$ git init
	$ git add 
	$ git commit -m "message"
	$ git status
	# tell us the files conditions
	# example: On branch master
		Changes not staged for commit:
	  	(use "git add <file>..." to update what will be committed)
	  	(use "git checkout -- <file>..." to discard changes in working directory)

		modified:   VersionControlPractice.txt

		no changes added to commit (use "git add" and/or "git commit -a")

	$ git diff
	# to compare working directory content with stage (content on stage is what has been added but not committed)

	$ git diff --cache
	# to compare stage with master

	$ git log
	# to check historical record of version control
	# example:
		commit aecd058c33609e26710535df568b6d0ffe9a1aa5
		Author: YifengGuo <gyf940517@gmail.com>
		Date:   Tue Oct 24 23:56:32 2017 -0400

		    third version append GPL

		commit 54b0663e20d87f90aad2d527a2397f36e537fcc3
		Author: YifengGuo <gyf940517@gmail.com>
		Date:   Tue Oct 24 23:52:01 2017 -0400

		    second version

		commit 6ff3753f5e893df87ecb11ca71bceb4481df3d6e
		Author: YifengGuo <gyf940517@gmail.com>
		Date:   Tue Oct 24 23:32:45 2017 -0400

		    first version

	$ git log --pretty=oneline
	# have a prettified look on the historical log
		aecd058c33609e26710535df568b6d0ffe9a1aa5 third version append GPL
		54b0663e20d87f90aad2d527a2397f36e537fcc3 second version
		6ff3753f5e893df87ecb11ca71bceb4481df3d6e first version

	6ff3753f5e893df87ecb11ca71bceb4481df3d6e is a huge hex number generated by SHA1 to avoid duplicate commit id during teamwork

2. Reset to historical version
	2.1 HEAD point to current/latest version
		HEAD^: last version
		HEAD^^: last version of last version
		HEAD~n: last nth version

	2.2 git reset
		$ git reset --hard HEAD^ (parameter hard will be covered later)
		# reset current version to last version

		$ cat xxx.file
		# take a look at the file of latest version

		